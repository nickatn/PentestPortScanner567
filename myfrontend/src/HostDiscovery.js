import React, { Component } from 'react'
import axios from "axios";
import NmapScanIP from "./NmapScanIP";
import { Loader, Label, Table, Dropdown, Popup, Progress, Button, Form, Image, Grid, Segment, Icon} from 'semantic-ui-react'

export default class HostDiscovery extends Component {
    constructor() {
        super()
        this.state = {
            IPsubmitHostForm: '',
            subnetSubmitHostForm: '',
            performingNmapScan: false,
            respondingHostsData: {subnet: "", hosts: []},
            NmapPingProgressBarStats: {percent: 0, timeLeft: 0},
            NmapScanIPInfo: {active: false, IPAddress: ""}
        };

        this.handleIPSubmitFormChange = this.handleIPSubmitFormChange.bind(this);
        this.handleSubnetSubmitFormChange = this.handleSubnetSubmitFormChange.bind(this);
    }


    cancelNmapScan = () => {
        
        // Tell the server to cancel scan
        axios.get("cancelNmapScan").then(response => {

            //When Scan is cancelled, let program know
            this.setState ({
                performingNmapScan: false
            });
            console.log(response);
        });
    };

    performNmapScanOnHost = (event) => {
        event.preventDefault();

        //Get the IP address from the submit form
        let IPAddress = this.state.IPsubmitHostForm;
        let subnetMask = this.state.subnetSubmitHostForm;
        if (subnetMask == "") {
            subnetMask = "32"
        }

        //Let program know that we are actively performing the NmapScan, and reset Nmap information to prepare for new data
        this.setState({
            performingNmapScan: true,
            respondingHostsData: [],
            NmapPingProgressBarStats: {percent: 0, timeLeft: 0}
        });

        //Start a loop that checks how far the Nmap scan has come every so and so seconds
        this.NmapProgressChecker();

        //Make an API call for the server to start an Nmap Scan on the designated host
        axios.get("/startHostDiscoveryNmapScan", {

            //Make the timeout for the call last 1 hour (Nmap call can be a maximum of 1 hour long)
            timeout: 1000 * 60 * 60,
            params: {
                IPAddressToPing: IPAddress,
                subnetMask: "/" + subnetMask
            }
        }).then(response => {
            if (response) {
                if (response.data) {
                    let tmpRespondingHostsData = {subnet: IPAddress + "/" + subnetMask, hosts: []}
                    for (let i = 0; i < response.data.length; i++) {
                        tmpRespondingHostsData.hosts.push(response.data[i].ip)
                    };
                    
                    this.setState ({
                        respondingHostsData: tmpRespondingHostsData
                    });
                
                } else {
                    console.log("Data not loaded")
                };
            } 

            //When done, tell the program that we are no longer performing the Nmap Scan
            this.setState ({
                performingNmapScan: false
            });   
        });
        

    }

    NmapProgressChecker = () => {
        //Set an interval for a given time where the function will update and check the status of the Nmap scan
        var progressCheck = setInterval(() => {

            //Make an API call for the server to check the progress of the Nmap scan
            axios.get("/NmapScanProgress").then(response => {
                
                //If the relevant data is there, create the progress bar statistics
                if (response.data && response.data.taskprogress) {
                    let tempNmapPingProgressBarStats = {percent: 0, timeLeft: 0};

                    //The first scan is a connect scan, if it is active then update the progress bar stats
                    if (response.data.taskprogress.$.task === "Ping Scan") {
                        tempNmapPingProgressBarStats.percent = response.data.taskprogress.$.percent;
                        tempNmapPingProgressBarStats.timeLeft = response.data.taskprogress.$.remaining;

                    } 

                    //Update NmapPingProgressBarStats
                    this.setState({
                        NmapPingProgressBarStats: tempNmapPingProgressBarStats
                    });
                } 
            }); 

            //If the performingNmapScan variable has been set to false, then stop checking for progress
            if (this.state.performingNmapScan === false) {
                clearInterval(progressCheck);
            };
        }, 500);
    };

    handleIPSubmitFormChange(event) {
        //Change state if submitform changes value
        this.setState({IPsubmitHostForm: event.target.value});
    };

    handleSubnetSubmitFormChange(event) {
        //Change state if submitform changes value
        this.setState({subnetSubmitHostForm: event.target.value});
    };


    toggleProgressBarLoader = () => {
        //If Nmap scan is active, then display loader
        if (this.state.performingNmapScan === true) {
            return (
                <Loader size='tiny' active inline />
            );
        };
    };

    togglePingScanProgressBar = () => {

        //If progress is at 0 percent, tell user that the scan is queued
        if (this.state.NmapPingProgressBarStats.percent === 0) {
            return (
                <Progress style={{width:'100%'}} progress='percent' percent={this.state.NmapPingProgressBarStats.percent} indicating >Host Discovery queued... {this.toggleProgressBarLoader()}</Progress>
            );
        
        //If progress is at 100 percent, tell user that the scan is complete
        } else if (this.state.NmapPingProgressBarStats.percent === 100) {
            return (
                <Progress style={{width:'100%'}} progress='percent' percent={this.state.NmapPingProgressBarStats.percent} success >Host Discovery Complete </Progress>
            );
        
        //If progress neither, tell the user the estimated time left 
        } else {
            return (
                <Progress style={{width:'100%'}} progress='percent' percent={this.state.NmapPingProgressBarStats.percent} indicating >Host Discovery: {this.state.NmapPingProgressBarStats.timeLeft} seconds left... {this.toggleProgressBarLoader()}</Progress>
            );
        };
    };

    toggleNmapProgressBars = () => {
        //If Nmap scan is active, return progress bars for the scan along with a cancel button
        if (this.state.performingNmapScan === true) {
            return (
                <Segment raised>
                    <Grid>
                        <Grid.Row>
                            <Grid.Column textAlign="left" width={14}>
                            
                            <h3>Scan in Progress...</h3>
                            </Grid.Column>
                            <Grid.Column textAlign="right" width={2}>
                                <Button circular icon='x' onClick={this.cancelNmapScan} />
                            </Grid.Column>
                        </Grid.Row>

                        <Grid.Row>
                            <Grid.Column>
                                <div style={{
                                    display: 'flex',
                                    alignItems: 'center',
                                    justifyContent: 'center'
                                }}>
                                    {this.togglePingScanProgressBar()}
                                </div>

                            </Grid.Column>
                        </Grid.Row>
                    </Grid>
                </Segment>
            );
        };
    };

    activateNmapScanIPInfo = (event, IPAddress) => {
        event.preventDefault();

        let tmpNmapScanIPInfo = this.state.NmapScanIPInfo
        tmpNmapScanIPInfo.active = true
        tmpNmapScanIPInfo.IPAddress = IPAddress
        this.setState ({
            NmapScanIPInfo: tmpNmapScanIPInfo
        })
    }

    displayRespondingHostsTable = (respondingHostsData) => {
        if(respondingHostsData.hosts && respondingHostsData.hosts.length > 0 ) {
            return (

                <Segment raised>
                    <Grid>
                        <Grid.Row>
                            <Grid.Column textAlign="left" width={14}>
                                <h3>Hosts found on {respondingHostsData.subnet}</h3>
                            </Grid.Column>
                            <Grid.Column textAlign="right" width={2}>
                                <Button circular icon='x' onClick={this.resetRespondingPortsData} />
                            </Grid.Column>
                        </Grid.Row>
                        <Grid.Row>
                            <Grid.Column>
                                <Table basic>
                                <Table.Header>
                                    <Table.Row>
                                        <Table.HeaderCell>Host</Table.HeaderCell>
                                        <Table.HeaderCell></Table.HeaderCell>
                                    </Table.Row>
                                </Table.Header>
                                <Table.Body>
                                {respondingHostsData.hosts.map((Portdata, index) => {


                                    //Retun a table row with info for the given port
                                    return ( 
                                        <Table.Row key={respondingHostsData.hosts[index]}>
                                            <Table.Cell>{respondingHostsData.hosts[index]}</Table.Cell>
                                            <Table.Cell textAlign="right"><Button onClick={(event) => this.activateNmapScanIPInfo(event, respondingHostsData.hosts[index])}>Scan IP</Button></Table.Cell>
                                        </Table.Row>
                                    );
                                })}

                                </Table.Body>
                                </Table>
                              
                            </Grid.Column>
                        </Grid.Row>
                    </Grid>
                </Segment>

                
            );
        } else if (respondingHostsData.subnet != "" && this.state.performingNmapScan === false) {
            return (
                <h3>No hosts found on {respondingHostsData.subnet}</h3>
            )
        } else {
            return null;
        };
    }

    displayInputForm = () => {
        return (
            <div>
                <Segment raised>
                    <Grid>
                        <Grid.Row>
                            <Grid.Column width={14} textAlign="left">
                                <h3>Scan network for active hosts</h3>
                            </Grid.Column>
                        </Grid.Row>
                        <Grid.Row style={{marginTop: '-10px'}}>
                            <Grid.Column textAlign="left">
                            
                                <Form onSubmit={this.performNmapScanOnHost}>
                                    <Form.Group>
                                        <Form.Input label = 'IP Address' placeholder='127.0.0.1' width={6} onChange={this.handleIPSubmitFormChange}/>
                                        <h2 style={{fontWeight: 'normal'}}>/</h2>
                                        <Form.Input label = 'Subnet mask' placeholder='24' width={3} onChange={this.handleSubnetSubmitFormChange}/>
                                    </Form.Group>
                                    <Form.Button disabled={this.state.performingNmapScan}>Scan Host</Form.Button>
                                </Form>
                            </Grid.Column>
                        </Grid.Row>
                    </Grid>
                </Segment>
            </div>
        )
    }

    returnFromNmapScan = () => {
        this.cancelNmapScan()
        this.setState ({
            NmapScanIPInfo: {active: false, IPAddress: ""}
        })
        
    }


    render() {
        if (this.state.NmapScanIPInfo.active == false) {
            return (
            <div style={{marginTop: '10px', marginRight: '10px', marginLeft: '-15px'}}>
                <div style={{padding: '10px'}}>
                    <h1>Host Discovery</h1>          
                </div>
                {this.displayInputForm()}
                    <div style={{marginTop: '10px'}}>
                        {/* Display Progress Bar loader for scan */}
                        {this.toggleNmapProgressBars()}
                        
                        {/* Display table with results */}
                        {this.displayRespondingHostsTable(this.state.respondingHostsData)}
    
                    </div>
            </div>
            )
        } else {
            return (
                <div style={{marginTop: '10px', marginRight: '10px', marginLeft: '-15px'}}>
                    <Grid style={{padding: '10px'}}>
                        <Grid.Row>
                            <Grid.Column style={{marginLeft: '-10px'}} width={1}>
                                <Button circular icon='arrow left' onClick={this.returnFromNmapScan} />
                            </Grid.Column >
                            <Grid.Column textAlign="center" width={14}>
                                <h1>Host Discovery</h1>
                            </Grid.Column>
                        </Grid.Row>
                    </Grid>
                    <NmapScanIP parentIPAddress={this.state.NmapScanIPInfo.IPAddress}/>
                </div>
            )
        }
    }
}
