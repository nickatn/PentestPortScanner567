import React, { Component } from 'react'
import axios from "axios";
import { Loader, Label, Table, Dropdown, Popup, Progress, Button, Form, Grid, Segment, List} from 'semantic-ui-react'


export default class NmapScanIP extends Component {
    constructor(props) {
        super()
        this.state = {
            submitHostForm: props.parentIPAddress,
            submitPortHostForm: "",
            performingNmapScan: false,
            respondingPortsData: {host: "", ports: []},
            NmapProgressBarStats: {connectScan: {percent: 0, timeLeft: 0}, serviceScan: {percent: 0, timeLeft: 0}, NSEScan: {percent: 0, timeLeft: 0}},
        };

        this.handleSubmitFormChange = this.handleSubmitFormChange.bind(this);
        this.handlePortSubmitFormChange = this.handlePortSubmitFormChange.bind(this);
    }
    

    cancelNmapScan = (event) => {
        event.preventDefault();
        console.log("cancelling scan")
        this.setState ({
            performingNmapScan: false
        });
        
        // Tell the server to cancel scan
        axios.get("cancelNmapScan").then(response => {

            //When Scan is cancelled, let program know
            console.log(response);
            console.log("cancelled")
        });
    };

    resetRespondingPortsData = () => {
        this.setState ({
            respondingPortsData: {host: "", ports: []}
        })
    }


    performNmapScanOnHost = (event) => {
        event.preventDefault();

        //Get the IP address and port from the submit form
        let IPAddress = this.state.submitHostForm;
        let Port = this.state.submitPortHostForm;
        let NmapQuery = ""

        if (Port == "") {
            NmapQuery = IPAddress
        } else {
            NmapQuery = "-p " + Port + " " + IPAddress
        }


        //Let program know that we are actively performing the NmapScan, and reset Nmap information to prepare for new data
        this.setState({
            performingNmapScan: true,
            respondingPortsData: {host: "", ports: []},
            NmapProgressBarStats: {connectScan: {percent: 0, timeLeft: 0}, serviceScan: {percent: 0, timeLeft: 0}, NSEScan: {percent: 0, timeLeft: 0}}
        });

        //Start a loop that checks how far the Nmap scan has come every so and so seconds
        this.NmapProgressChecker();

        //Make an API call for the server to start an Nmap Scan on the designated host
        axios.get("/startSingleNmapScan", {
            params: {
                IPAddressToPing: NmapQuery
            }
        }).then(response => {
            if (response) {

                //Create an array of the open ports returned from the Nmap Scan
                let ArrayOfRespondingPorts = this.createArrayOfRespondingPorts(response.data);
                

                //Check if there are any responding ports
                if (ArrayOfRespondingPorts) {

                    //Create a temporary respondingPortsData 
                    let tmpRespondingPortsData = {host: IPAddress, ports: []};

                    //Loop through the ports
                    for (let i=0; i<ArrayOfRespondingPorts.length; i++) {
                        
                        //Make the portinfo in the data printable, and put it into the respondingPortsData and tmpRespondingPortsData
                        //this.state.respondingPortsData.ports.push(this.preparePortInfoForPrint(ArrayOfRespondingPorts[i]))
                        tmpRespondingPortsData.ports.push(this.preparePortInfoForPrint(ArrayOfRespondingPorts[i]))
                    };
                    this.setState ({
                        respondingPortsData: tmpRespondingPortsData
                    })

                }
                    
            }

            //When done, tell the program that we are no longer performing the Nmap Scan
            this.setState ({
                performingNmapScan: false
            });   
        });
        
    };


    createArrayOfRespondingPorts = (responseData) => {
        //If there is response data, return the openports, if not then return null
        if (responseData[0]) {
            if (responseData[0].openPorts) {
                return responseData[0].openPorts;
            };
        } else {
            console.log("No ResponseData");
            return null;
        };   
    };

    preparePortInfoForPrint = (portData) => {
        //Declare the variables used
        let PortInfo = "";
        let ServiceInfo = "";
        let VersionInfo = "";


        //If the port and protocol are in data, put them in the same string
        if (portData.port) {
            PortInfo = portData.port.toString();
            if (portData.protocol) {
                PortInfo += "/" + portData.protocol;
            };
        };

        //If the tunnel and service are in data, put them in the same string
        if (portData.tunnel) {
            ServiceInfo = portData.tunnel;
            if (portData.service) {
                ServiceInfo += "/"+ portData.service;
            };

        // If only service is in data, then only put service in string
        } else if (portData.service) {
            ServiceInfo += portData.service;
        };

        //If product and version are in data, put them in the same string
        if (portData.product) {
            VersionInfo = portData.product;
            if (portData.version) {
                VersionInfo += " " + portData.version;
            };
        };



        //Return all the new strings
        return (
            {PortInfo: PortInfo, ServiceInfo: ServiceInfo, VersionInfo: VersionInfo}
        );
    };

    NmapProgressChecker = () => {
        //Set an interval for a given time where the function will update and check the status of the Nmap scan
        var progressCheck = setInterval(() => {

            //Make an API call for the server to check the progress of the Nmap scan
            axios.get("/NmapScanProgress").then(response => {

                //If the relevant data is there, create the progress bar statistics
                if (response.data && response.data.taskprogress) {
                    let tempNmapProgressBarStats = this.state.NmapProgressBarStats;

                    //The first scan is a connect scan, if it is active then update the progress bar stats
                    if (response.data.taskprogress.$.task === "Connect Scan") {
                        tempNmapProgressBarStats.connectScan.percent = response.data.taskprogress.$.percent;
                        tempNmapProgressBarStats.connectScan.timeLeft = response.data.taskprogress.$.remaining;

                    //The next scan is a service scan, if it is active then make sure the previous stats are 100 percent and update the progress bar stats
                    } else if (response.data.taskprogress.$.task === "Service scan") {
                        tempNmapProgressBarStats.connectScan.percent = 100;
                        tempNmapProgressBarStats.serviceScan.percent = response.data.taskprogress.$.percent;
                        tempNmapProgressBarStats.serviceScan.timeLeft = response.data.taskprogress.$.remaining;

                    //The final scan is a NSE scan, if it is active then make sure the previous stats are 100 percent and update the progress bar stats
                    } else if (response.data.taskprogress.$.task === "NSE") {
                        tempNmapProgressBarStats.connectScan.percent = 100;
                        tempNmapProgressBarStats.serviceScan.percent = 100;
                        tempNmapProgressBarStats.NSEScan.percent = response.data.taskprogress.$.percent;
                        tempNmapProgressBarStats.NSEScan.timeLeft = response.data.taskprogress.$.remaining;
                    };

                    //Update NmapProgressBarStats
                    this.setState({
                        NmapProgressBarStats: tempNmapProgressBarStats
                    });
                };
            }).catch( error => {
                console.log("no response from server")
            }); 

            //If the performingNmapScan variable has been set to false, then stop checking for progress
            if (this.state.performingNmapScan === false) {
                clearInterval(progressCheck);
            };
        }, 500);
    };

    handleSubmitFormChange(event) {
        //Change state if submitform changes value
        this.setState({submitHostForm: event.target.value});

    };

    handlePortSubmitFormChange(event) {
        //Change state if submitform changes value
        this.setState({submitPortHostForm: event.target.value});

    };



    


    displayRespondingPortsTable = (respondingPortsData) => {
        //Return a table if there are responding ports
        if(respondingPortsData.ports && respondingPortsData.ports.length > 0 ) {
            return (

                <Segment raised>
                    <Grid>
                        <Grid.Row>
                            <Grid.Column textAlign="left" width={14}>
                                <h3>Open ports found on {this.state.respondingPortsData.host}</h3>
                            </Grid.Column>
                            <Grid.Column textAlign="right" width={2}>
                                <Button circular icon='x' onClick={this.resetRespondingPortsData} />
                            </Grid.Column>
                        </Grid.Row>
                        <Grid.Row>
                            <Grid.Column>
                                <Table basic>
                                <Table.Header>
                                    <Table.Row>
                                        <Table.HeaderCell>Port</Table.HeaderCell>
                                        <Table.HeaderCell>Service</Table.HeaderCell>
                                        <Table.HeaderCell>Version</Table.HeaderCell>
                                    </Table.Row>
                                </Table.Header>
                                <Table.Body>
                                {respondingPortsData.ports.map((Portdata, index) => {

                                    //Retun a table row with info for the given port
                                    return ( 
                                        <Table.Row key={respondingPortsData.ports[index].PortInfo}>
                                            <Table.Cell>{respondingPortsData.ports[index].PortInfo}</Table.Cell>
                                            <Table.Cell>{respondingPortsData.ports[index].ServiceInfo}</Table.Cell>
                                            <Table.Cell>{respondingPortsData.ports[index].VersionInfo}</Table.Cell>
                                        </Table.Row>
                                    );
                                })}

                                </Table.Body>
                                </Table>
                              
                            </Grid.Column>
                        </Grid.Row>
                    </Grid>
                </Segment>

                
            );
        } else {
            return null;
        };
    };

    toggleProgressBarLoader = () => {
        //If Nmap scan is active, then display loader
        if (this.state.performingNmapScan === true) {
            return (
                <Loader size='tiny' active inline />
            );
        };
    };

    toggleConnectScanProgressBar = () => {

        //If progress is at 0 percent, tell user that the scan is queued
        if (this.state.NmapProgressBarStats.connectScan.percent === 0) {
            return (
                <Progress style={{width:'100%'}} progress='percent' percent={this.state.NmapProgressBarStats.connectScan.percent} indicating >Connect Scan queued... {this.toggleProgressBarLoader()}</Progress>
            );
        
        //If progress is at 100 percent, tell user that the scan is complete
        } else if (this.state.NmapProgressBarStats.connectScan.percent === 100) {
            return (
                <Progress style={{width:'100%'}} progress='percent' percent={this.state.NmapProgressBarStats.connectScan.percent} success >Connect Scan Complete </Progress>
            );
        
        //If progress neither, tell the user the estimated time left 
        } else {
            return (
                <Progress style={{width:'100%'}} progress='percent' percent={this.state.NmapProgressBarStats.connectScan.percent} indicating >Connect Scan: {this.state.NmapProgressBarStats.connectScan.timeLeft} seconds left... {this.toggleProgressBarLoader()}</Progress>
            );
        };
    };

    toggleServiceScanProgressBar = () => {

        //If progress is at 0 percent, tell user that the scan is queued
        if (this.state.NmapProgressBarStats.serviceScan.percent === 0) {
            return (
                <Progress style={{width:'100%'}} progress='percent' percent={this.state.NmapProgressBarStats.serviceScan.percent} indicating >Service Scan queued... </Progress>
            );
        
        //If progress is at 100 percent, tell user that the scan is complete    
        } else if (this.state.NmapProgressBarStats.serviceScan.percent === 100) {
            return (
                <Progress style={{width:'100%'}} progress='percent' percent={this.state.NmapProgressBarStats.serviceScan.percent} success >Service Scan Complete </Progress>
            );
        
        //If progress neither, tell the user the estimated time left
        } else {
            return (
                <Progress style={{width:'100%'}} progress='percent' percent={this.state.NmapProgressBarStats.serviceScan.percent} indicating >Service Scan: {this.state.NmapProgressBarStats.serviceScan.timeLeft} seconds left... {this.toggleProgressBarLoader()}</Progress>
            );
        };
    };

    toggleNSEScanProgressBar = () => {

        //If progress is at 0 percent, tell user that the scan is queued
        if (this.state.NmapProgressBarStats.NSEScan.percent === 0) {
            return (
                <Progress style={{width:'100%'}} progress='percent' percent={this.state.NmapProgressBarStats.NSEScan.percent} indicating >NSE Scan queued... </Progress>
            );
        
        //If progress is at 100 percent, tell user that the scan is complete 
        } else if (this.state.NmapProgressBarStats.NSEScan.percent === 100) {
            return (
                <Progress style={{width:'100%'}} progress='percent' percent={this.state.NmapProgressBarStats.NSEScan.percent} success >NSE Scan Complete </Progress>
            );
        
        //If progress neither, tell the user the estimated time left
        } else {
            return (
                <Progress style={{width:'100%'}} progress='percent' percent={this.state.NmapProgressBarStats.NSEScan.percent} indicating >NSE Scan: {this.state.NmapProgressBarStats.NSEScan.timeLeft} seconds left... {this.toggleProgressBarLoader()}</Progress>
            );
        };
    };

    toggleNmapProgressBars = () => {
        //If Nmap scan is active, return progress bars for the scan along with a cancel button
        if (this.state.performingNmapScan === true) {
            return (
                <Segment raised>
                    <Grid>
                        <Grid.Row>
                            <Grid.Column textAlign="left" width={14}>
                            
                            <h3>Scan in Progress...</h3>
                            </Grid.Column>
                            <Grid.Column textAlign="right" width={2}>
                                <Button circular icon='x' onClick={this.cancelNmapScan} />
                            </Grid.Column>
                        </Grid.Row>

                        <Grid.Row>
                            <Grid.Column>
                                <div style={{
                                    display: 'flex',
                                    alignItems: 'center',
                                    justifyContent: 'center'
                                }}>
                                    {this.toggleConnectScanProgressBar()}
                                </div>

                                <div style={{
                                    display: 'flex',
                                    alignItems: 'center',
                                    justifyContent: 'center',
                                    marginTop: '15px'
                                }}>
                                    {this.toggleServiceScanProgressBar()}
                                </div>

                                <div style={{
                                    display: 'flex',
                                    alignItems: 'center',
                                    justifyContent: 'center',
                                    marginTop: '15px'
                                }}>
                                    {this.toggleNSEScanProgressBar()}
                                </div>         
                            </Grid.Column>
                        </Grid.Row>
                    </Grid>
                </Segment>
            );
        };
    };
    


    displayInputForm = () => {
        if (this.props.parentIPAddress) {
            return (
                <Segment raised>
                    <Grid>   
                        <Grid.Row>
                            <Grid.Column width={14} textAlign="left">
                                <h3>Perform an Nmap scan on {this.props.parentIPAddress}</h3>
                            </Grid.Column>
                            <Grid.Column width={2} textAlign="right">

                            </Grid.Column>
                        </Grid.Row>
                        <Grid.Row style={{marginTop: '-20px'}}>
                            <Grid.Column textAlign="left">
                            
                                <Form onSubmit={this.performNmapScanOnHost}>
                                    <Form.Group>
                                        <Form.Input label = 'Host to scan' placeholder={this.props.parentIPAddress} width={8} disabled/>
                                    </Form.Group>
                                    <Form.Button disabled={this.state.performingNmapScan}>Scan Host</Form.Button>
                                </Form>
    
                            </Grid.Column>
                        </Grid.Row>
                    </Grid>
                </Segment>
            )
        } else {
            return (
                <Segment raised>
                    <Grid>
                        <Grid.Row>
                            <Grid.Column width={14} textAlign="left">
                                <h3>Perform an Nmap scan on a single host</h3>
                            </Grid.Column>
                            <Grid.Column width={2} textAlign="right">
                            </Grid.Column>
                        </Grid.Row>
                        <Grid.Row style={{marginTop: '-23px'}}>
                            <Grid.Column textAlign="left">
                            
                                <Form onSubmit={this.performNmapScanOnHost}>
                                    <Form.Group>
                                        <Form.Input label = 'Host to scan' placeholder='127.0.0.1' width={8} onChange={this.handleSubmitFormChange}/>
                                        <Form.Input label = 'Port' placeholder='1-100' width={8} onChange={this.handlePortSubmitFormChange}/>
                                    </Form.Group>
                                    <Form.Button disabled={this.state.performingNmapScan}>Scan Host</Form.Button>
                                </Form>

                            </Grid.Column>
                        </Grid.Row>
                    </Grid>
                </Segment>
            )
        }
    }



    render() {
        return (
            <div>
                {this.displayInputForm()}
                    <div style={{marginTop: '10px'}}>
                        {/* Display Progress Bar loader for scan */}
                        {this.toggleNmapProgressBars()}

                        {/* Display table with results */}
                        {this.displayRespondingPortsTable(this.state.respondingPortsData)}
                    </div>
            </div>
        );
    };
};